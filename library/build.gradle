plugins {
    id "com.jfrog.bintray" version "1.7.3"
    id "com.github.dcendents.android-maven" version "1.5"
}

apply plugin: 'com.android.library'

//Values
def SDK_ARTIFACT_NAME = 'spatula'
def SDK_GROUP = 'com.mika_tk.android.spatula'

def SDK_VERSION_NAME = "1.0.0-beta4";
def SDK_VERSION_CODE = 7;

//maven
group = SDK_GROUP
version = SDK_VERSION_NAME

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
//    compileSdkVersion = 25
//    buildToolsVersion = "25.0.2"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 25
        versionName SDK_VERSION_NAME
        versionCode SDK_VERSION_CODE
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        consumerProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        archivesBaseName = SDK_ARTIFACT_NAME
    }

    compileOptions {
        compileOptions {
            sourceCompatibility rootProject.ext.sourceCompatibilityVersion
            targetCompatibility rootProject.ext.targetCompatibilityVersion
//            sourceCompatibility JavaVersion.VERSION_1_7
//            targetCompatibility JavaVersion.VERSION_1_7
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }

    // disable lint errors
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
        disable 'InvalidPackage'
        disable 'GoogleAppIndexingWarning'
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:design:25.2.0'
}

task disableTestFailures(type: Test) {
    ignoreFailures = true
}

/**
 * Bintray upload (Jcenter & maven publication )
 *
 * tanks to @AshraffHathibelagal (http://code.tutsplus.com/tutorials/creating-and-publishing-an-android-library--cms-24582#)
 * and to @nuuneoi from The Cheese Factory (https://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en)
 */
bintray {

    // "You should define BINTRAY_USER and BINTRAY_KEY in System env. Or use EnvInject CI plugin"
    user = System.getenv("BINTRAY_USER")
    key = System.getenv("BINTRAY_KEY")

    if (user == null || key == null) {
        // for local builds, you can add 'bintrayUser' & 'bintrayApiKey' in the 'local.properties' (not versioned!!)
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        user = properties.getProperty('bintrayUser') ?: "NoBintrayUserFound"
        key = properties.getProperty('bintrayApiKey') ?: "NoBintrayKeyFound"
    }

    override = false //[Default: false] Whether to override version artifacts already published
    //dryRun = true

    pkg {
        repo = 'android'
        name = SDK_ARTIFACT_NAME
        licenses = ['Apache-2.0']
        group = SDK_GROUP

        version {
            name = SDK_VERSION_NAME
            desc = 'Spatula version ' + SDK_VERSION_NAME
            vcsTag = SDK_VERSION_NAME
            released = new Date()
//            gpg {
//                sign = true
//                passphrase = System.getenv("BINTRAY_GPG_PASSPHRASE")
//                if (passphrase == null) {
//                    Properties properties = new Properties()
//                    properties.load(project.rootProject.file('local.properties').newDataInputStream())
//                    passphrase = properties.getProperty('bintrayGpgPassphrase') ?: "NoBintrayGpgPassphrase"
//                    logger.info('Passphrase is ' + passphrase)
//                }
//            }
        }
    }

    configurations = ['archives']
}
